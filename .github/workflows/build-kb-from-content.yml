name: Build KB from content

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-kb:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Ensure kb/
        run: mkdir -p kb scripts

      - name: Write builder script
        shell: bash
        run: |
          cat > scripts/build-kb-from-content.mjs <<'EOF'
          import { promises as fs } from 'node:fs';
          import path from 'node:path';

          const ROOT = process.cwd();
          const PAGES_DIR = path.join(ROOT, 'pages');
          const FLOWS_DIR = path.join(ROOT, 'flows');
          const KB_DIR = path.join(ROOT, 'kb');

          const isHtml = (p) => p.toLowerCase().endsWith('.html');
          const isHar  = (p) => p.toLowerCase().endsWith('.har');

          async function walk(dir) {
            const acc = [];
            async function rec(d) {
              let ents;
              try { ents = await fs.readdir(d, { withFileTypes: true }); }
              catch { return; }
              for (const e of ents) {
                const p = path.join(d, e.name);
                if (e.isDirectory()) await rec(p);
                else acc.push(p);
              }
            }
            await rec(dir);
            return acc;
          }

          async function read(p) {
            try { return await fs.readFile(p, 'utf8'); } catch { return ''; }
          }

          function htmlMeta(html) {
            const title = html.match(/<title[^>]*>([\s\S]*?)<\/title>/i)?.[1]?.trim() ?? '';
            const h1 = html.match(/<h1[^>]*>([\s\S]*?)<\/h1>/i)?.[1]?.trim() ?? '';
            const h2 = html.match(/<h2[^>]*>([\s\S]*?)<\/h2>/i)?.[1]?.trim() ?? '';
            const txt = (title + ' ' + h1 + ' ' + h2).toLowerCase();
            const hasCal  = /calendar|aria-label="calendar"|data-date/i.test(html);
            const hasSlot = /time-slot|class="[^"]*slot|aria-label="time"/i.test(html);
            const hasErr  = /error|ошибк/i.test(html);
            const hasOk   = /success|успеш/i.test(html);
            const group =
              hasCal || hasSlot ? 'select-time' :
              /confirm|подтверж/i.test(txt) ? 'confirm' :
              /service|услуг/i.test(txt) ? 'select-services' :
              /master|специалист/i.test(txt) ? 'select-master' :
              /personal|личн/i.test(txt) ? 'personal' :
              /auth|verify|код/i.test(txt) ? 'auth' : 'misc';
            const state =
              hasErr ? 'error' :
              hasOk  ? 'success' :
              hasCal && !hasSlot ? 'calendar-only' :
              hasCal &&  hasSlot ? 'calendar-with-slots' :
              'base';
            return { title, h1, h2, group, state };
          }

          function rel(p){ return p.replace(ROOT + path.sep, '').replace(/\\/g,'/'); }

          async function main(){
            await fs.mkdir(KB_DIR, { recursive: true });

            // STATES INDEX (по содержимому HTML)
            const htmlFiles = (await walk(PAGES_DIR)).filter(isHtml);
            const rows = [];
            for (const f of htmlFiles) {
              const meta = htmlMeta(await read(f));
              rows.push({ file: rel(f), title: meta.title || meta.h1 || meta.h2 || '—', group: meta.group, state: meta.state });
            }
            const groups = rows.reduce((m,r)=>((m[r.group]??=[]).push(r),m),{});
            for (const g of Object.keys(groups)) groups[g].sort((a,b)=>a.file.localeCompare(b.file));

            let states = `# States Index — построено по содержимому HTML\n\n`;
            states += `> Источник: \`pages/**\` (title/h1/h2 + маркеры календаря/слотов/ошибок)\n\n`;
            for (const [g,rs] of Object.entries(groups)) {
              states += `## ${g}\n\n| Файл | Заголовок | Состояние |\n|------|-----------|-----------|\n`;
              for (const r of rs) states += `| \`${r.file}\` | ${r.title} | \`${r.state}\` |\n`;
              states += `\n`;
            }
            await fs.writeFile(path.join(KB_DIR,'states-index.md'), states, 'utf8');

            // API CONTRACTS (перечень URL из HAR, без дубликатов и ассетов)
            const harFiles = (await walk(FLOWS_DIR)).filter(isHar);
            const seen = new Map();
            for (const f of harFiles) {
              let har; try{ har = JSON.parse(await read(f)); }catch{ continue; }
              const entries = har?.log?.entries ?? [];
              for (const e of entries) {
                const m = (e.request?.method || '').toUpperCase();
                const u = e.request?.url || '';
                if (!m || !u) continue;
                if (/\.(png|jpg|jpeg|gif|svg|css|js|woff2?|map|ico)(\?|$)/i.test(u)) continue;
                if (/^data:/i.test(u)) continue;
                const key = `${m} ${u}`;
                if (!seen.has(key)) seen.set(key, { method: m, url: u, where: new Set() });
                seen.get(key).where.add(rel(f));
              }
            }
            const list = [...seen.values()].sort((a,b)=>a.url===b.url? a.method.localeCompare(b.method) : a.url.localeCompare(b.url));
            let api = `# API Contracts (извлечено из HAR, без догадок)\n\n> Источник: \`flows/**.har\`\n\n`;
            for (const it of list) {
              api += `### ${it.method} ${it.url}\nВстречается в:\n`;
              for (const w of [...it.where].sort()) api += `- \`${w}\`\n`;
              api += `\n`;
            }
            await fs.writeFile(path.join(KB_DIR,'api-contracts.md'), api, 'utf8');

            console.log('Wrote kb/states-index.md and kb/api-contracts.md');
          }

          await main().catch(e => { console.error(e); process.exit(1); });
          EOF

      - name: Build KB from content
        run: node scripts/build-kb-from-content.mjs

      - name: Commit KB
        run: |
          git config user.name "kb-bot"
          git config user.email "kb-bot@users.noreply.github.com"
          git add kb/states-index.md kb/api-contracts.md || true
          git commit -m "chore(kb): rebuild from content" || echo "nothing to commit"
          git push || true
