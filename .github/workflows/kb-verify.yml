name: Verify KB integrity (reference/)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  verify-kb:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify manifest & previews vs repository contents
        shell: bash
        run: |
          set -euo pipefail

          ROOT="."
          REF_DIR="reference"
          MANIFEST="${REF_DIR}/kb/manifest.json"
          PREV_DIR="${REF_DIR}/kb/previews_full"
          REPORT="${REF_DIR}/kb/verify.md"

          # Подсчёты по репозиторию (только по содержимому, без привязки к именам)
          mapfile -t HTML_FILES < <(find "${REF_DIR}/pages" -type f -name '*.html' | sort || true)
          mapfile -t HAR_FILES  < <(find "${REF_DIR}/flows" -type f -name '*.har'  | sort || true)

          HTML_CNT=${#HTML_FILES[@]}
          HAR_CNT=${#HAR_FILES[@]}

          # Список "важных" файлов репозитория (HTML+HAR)
          mapfile -t REPO_IMPORTANT < <(
            { printf '%s\n' "${HTML_FILES[@]}"; printf '%s\n' "${HAR_FILES[@]}"; } \
            | sed 's#^\./##' | sort -u
          )

          MF_PRESENT=false
          if [[ -f "${MANIFEST}" ]]; then
            MF_PRESENT=true
            # Пути из манифеста и части превью
            mapfile -t MANIFEST_PATHS < <(jq -r '.files[].path // empty' "${MANIFEST}" | sort -u || true)
            PARTS_COUNT=$(jq '[.files[].parts[]] | length' "${MANIFEST}" 2>/dev/null || echo 0)
            FILES_TOTAL=$(jq '.files | length' "${MANIFEST}" 2>/dev/null || echo 0)
          else
            MANIFEST_PATHS=()
            PARTS_COUNT=0
            FILES_TOTAL=0
          fi

          # Проверка, что папка превью существует и не пуста
          PREV_EXISTS="нет"
          if [[ -d "${PREV_DIR}" ]] && [[ $(find "${PREV_DIR}" -type f | wc -l | tr -d ' ') -gt 0 ]]; then
            PREV_EXISTS="да"
          fi

          # Кто не попал в манифест (есть в репо, нет в manifest.json)
          # (если манифеста нет — считаем, что всё отсутствует)
          if $MF_PRESENT; then
            # разность множеств: REPO_IMPORTANT \ MANIFEST_PATHS
            mapfile -t MISSING_IN_MANIFEST < <(
              comm -23 <(printf '%s\n' "${REPO_IMPORTANT[@]}" | sort) \
                       <(printf '%s\n' "${MANIFEST_PATHS[@]}" | sort)
            )
          else
            MISSING_IN_MANIFEST=("${REPO_IMPORTANT[@]}")
          fi

          # Сироты манифеста (есть в манифесте, но файла нет)
          ORPHANS=()
          if $MF_PRESENT; then
            while IFS= read -r p; do
              [[ -f "${p}" ]] || ORPHANS+=("$p")
            done < <(printf '%s\n' "${MANIFEST_PATHS[@]}")
          fi

          # Генерация отчёта
          TS_UTC="$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          mkdir -p "$(dirname "${REPORT}")"

          {
            echo "# Verify — проверка целостности базы знаний"
            echo "Дата: ${TS_UTC}"
            echo
            echo "## Сводка"
            echo "- HTML в репозитории: ${HTML_CNT}"
            echo "- HAR в репозитории: ${HAR_CNT}"
            echo "- Всего путей в manifest.json: ${FILES_TOTAL}"
            echo "- Всего частей превью (parts): ${PARTS_COUNT}"
            echo "- Папка превью существует и непуста: ${PREV_EXISTS}"
            echo
            echo "## Отсутствуют в manifest.json (есть в репозитории)"
            if [[ ${#MISSING_IN_MANIFEST[@]} -eq 0 ]]; then
              echo "✅ Нет — все важные файлы учтены в манифесте."
            else
              echo ""
              for p in "${MISSING_IN_MANIFEST[@]}"; do
                echo "- ${p}"
              done
            fi
            echo
            echo "## Сироты манифеста (есть в manifest.json, но нет в репозитории)"
            if [[ ${#ORPHANS[@]} -eq 0 ]]; then
              echo "✅ Нет — все пути из манифеста существуют в репозитории."
            else
              echo ""
              for p in "${ORPHANS[@]:0:200}"; do
                echo "- ${p}"
              done
              [[ ${#ORPHANS[@]} -gt 200 ]] && echo "... и ещё $(( ${#ORPHANS[@]} - 200 )) путей"
            fi
            echo
            echo "## Сэмпл путей (из репозитория)"
            printf '%s\n' "${REPO_IMPORTANT[@]}" | head -n 20 | sed 's/^/- /'
          } > "${REPORT}"

          echo "Report written to ${REPORT}"

      - name: Commit verify report
        run: |
          git config user.name "KB-bot"
          git config user.email "kb-bot@users.noreply.github.com"
          git add reference/kb/verify.md
          git commit -m "chore(kb): verify report" || echo "nothing to commit"
          git push || true
