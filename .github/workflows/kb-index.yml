name: Build full KB previews (incremental)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-index:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Prepare folders
        run: |
          mkdir -p kb/previews_full
          echo '{"files":[]}' > kb/manifest.json

      - name: Generate full previews (+split big) with diagnostics
        shell: bash
        run: |
          set -euo pipefail

          echo "=== Collecting file list (excluding kb/** and .github/**) ==="
          mapfile -t ALL < <(git ls-files ':!:kb/**' ':!:.github/**')
          echo "Total files from git ls-files: ${#ALL[@]}"
          printf '%s\n' "${ALL[@]:0:30}" | sed 's/^/  â€¢ /' || true

          is_text () {
            case "${1,,}" in
              *.html|*.har|*.json|*.md|*.css|*.js|*.ts|*.tsx|*.svg|*.txt) return 0 ;;
              *) return 1 ;;
            esac
          }

          safe_part () {
            echo "$1" | sed 's#[^-A-Za-z0-9._/ ]#_#g; s# #_#g'
          }

          out_base () {
            local path="$1"
            local dir="$(dirname "$path")"
            local file="$(basename "$path")"
            local hash="$(printf "%s" "$path" | sha1sum | cut -c1-8)"
            local safe_dir="$(safe_part "$dir")"
            local safe_file="$(safe_part "$file")"
            echo "kb/previews_full/${safe_dir}/${hash}__${safe_file}"
          }

          add_manifest () {
            local path="$1" size="$2" sha="$3" parts_json="$4"
            jq --arg p "$path" --arg s "$size" --arg h "$sha" \
               --argjson parts "$parts_json" \
               '.files += [{"path":$p,"size":($s|tonumber),"sha256":$h,"parts":$parts}]' \
               kb/manifest.json > kb/.manifest.tmp && mv kb/.manifest.tmp kb/manifest.json
          }

          PART_SIZE=400000
          PROCESSED=0
          TEXT=0

          for path in "${ALL[@]}"; do
            if ! is_text "$path"; then
              continue
            fi
            TEXT=$((TEXT+1))

            size=$(wc -c < "$path" | tr -d ' ')
            sha=$(sha256sum "$path" | awk '{print $1}')
            base="$(out_base "$path")"
            mkdir -p "$(dirname "$base")"
            lang="${path##*.}"

            if [ "$size" -le "$PART_SIZE" ]; then
              out="${base}.md"
              {
                echo "### $path"
                echo
                echo '```'"$lang"
                cat "$path"
                echo
                echo '```'
              } > "$out"
              parts='[{"file":"'"${out#kb/}"'"}]'
            else
              tmpdir=$(mktemp -d)
              split -b "$PART_SIZE" -d -a 3 "$path" "$tmpdir/part_"
              parts="["
              n=0
              for p in "$tmpdir"/part_*; do
                n=$((n+1))
                idx=$(printf "%03d" "$n")
                out="${base}.part${idx}.md"
                {
                  echo "### $path (part ${idx})"
                  echo
                  echo '```'"$lang"
                  cat "$p"
                  echo
                  echo '```'
                } > "$out"
                parts="${parts}{\"file\":\"${out#kb/}\"},"
              done
              parts="${parts%,}]"
              rm -rf "$tmpdir"
            fi

            add_manifest "$path" "$size" "$sha" "$parts"
            PROCESSED=$((PROCESSED+1))
          done

          echo "=== Stats ==="
          echo "Text-like files seen: $TEXT"
          echo "Processed & added to manifest: $PROCESSED"

          if [ "$PROCESSED" -eq 0 ]; then
            echo "WARNING: Nothing was processed. Dumping first 50 file paths for inspection:"
            printf '%s\n' "${ALL[@]:0:50}"
          fi

      - name: Commit previews & manifest
        run: |
          git config user.name "kb-bot"
          git config user.email "kb-bot@users.noreply.github.com"
          git add kb/manifest.json kb/previews_full/ || true
          git commit -m "chore(kb): update full previews & manifest" || echo "nothing to commit"
          git push || true
