generator client { provider = "prisma-client-js" }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Business {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  branches  Branch[]
  services  Service[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id         String   @id @default(cuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
  name       String
  slug       String
  address    String?
  masters    Master[]
  slots      Slot[]
  bookings   Booking[]

  @@unique([businessId, slug])
}

model Master {
  id         String   @id @default(cuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id])
  name       String
  photoUrl   String?
  rating     Float?
  services   MasterService[]
  slots      Slot[]
  bookings   Booking[]

  @@index([businessId])
}

model Service {
  id              String   @id @default(cuid())
  businessId      String
  business        Business @relation(fields: [businessId], references: [id])
  name            String
  description     String?
  baseDurationMin Int
  basePrice       Int
  masters         MasterService[]

  @@index([businessId])
}

model MasterService {
  masterId    String
  serviceId   String
  durationMin Int
  price       Int

  master  Master  @relation(fields: [masterId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@id([masterId, serviceId])
}

model Slot {
  id        String   @id @default(cuid())
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id])
  masterId  String
  master    Master   @relation(fields: [masterId], references: [id])
  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])

  startsAt  DateTime
  endsAt    DateTime
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([branchId, startsAt])
  @@index([masterId, startsAt])
}

enum BookingStatus { PENDING CONFIRMED CANCELLED }

model Booking {
  id            String        @id @default(cuid())
  slotId        String        @unique
  slot          Slot          @relation(fields: [slotId], references: [id])
  branchId      String
  branch        Branch        @relation(fields: [branchId], references: [id])
  masterId      String
  master        Master        @relation(fields: [masterId], references: [id])
  serviceId     String
  service       Service       @relation(fields: [serviceId], references: [id])
  customerName  String?
  customerPhone String?
  status        BookingStatus @default(CONFIRMED)
  createdAt     DateTime      @default(now())
}
